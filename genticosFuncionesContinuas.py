# -*- coding: utf-8 -*-
"""Genticos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hFn_VKEeud9cDKu7lH0-KukS5GoF7WdX
"""

import random
import argparse
import array
from math import ceil, log
import numpy as np
import datetime

class Individuo:
    def __init__(self,genes,fenotipo,adaptacion,qi,pi):
        self.genes = genes
        self.fenotipo = fenotipo
        self.adaptacion = adaptacion
        self.qi = qi
        self.pi = pi
         
#x_max = input("Introduce el limite superior ")
#x_min = input("Introduce el liminte inferior ")
#t_poblacion = input ("Introduce el tamaño de la poblacion ")
#n_generaciones = input ("Introduce el numero de generaciones ")

x_max = 32
x_min = 0
t_poblacion = 8
n_generaciones = 3


largoCrom = ceil(log(1 + ((float(x_max) - float(x_min))/0.001), 2))

def poblacion_inicial(Tpo,TEle):
    poblacion = []
    for i in range(t_poblacion):
        individuo=[]
        for j in range (largoCrom):
            individuo.append(random.randint(0,1))
           # print (individuo)
        # print (individuo)
        poblacion.append(individuo)

    return poblacion


def fenotipo(genes):
  fen = []
  for i in genes:
    print(i)
    print(float(int(''.join(str(e) for e in i),base = 2)* ((x_max-x_min)/(2** largoCrom-1))))
    fen.append(float(int(''.join(str(e) for e in i),base = 2)* ((x_max-x_min)/(2** largoCrom-1))),)
  return fen

def adaptacion(fenotipo):
    for j in fenotipo:
      print("Adaptacion",20 + np.exp(1.0) - 20 * (np.exp(-0.2 * abs(j))) - np.exp(
        np.cos(2 * np.pi * j)))
    
  
self.adp=20 + np.exp(1.0) - 20 * (np.exp(-0.2 * abs(self.fen))) - np.exp(
        np.cos(2 * np.pi * self.fen))
def MetodoSeleccionElite(Tpo,poblacion):
    sel_super = []
    elites = []
    Tamañoelite = int(ceil(Tpo*2/100))
    print ("Tamaño de elite",Tamañoelite)
    #sel_elite[0 for i in range(0 , Tamañoelite)]
    #for i in range(0,Tpo):
     #   elites.append(False)

def Ruleta(poblacion):
    ValorAdaptacion=0
    print(poblacion_inicial)
    TotalIndividuos=len(poblacion_inicial)
    for i in range(TotalIndividuos):
        ValorAdaptacion+=poblacion[i].adaptacion
        print (ValorAdaptacion)        

def ProbabilidadCruce():
    Prob_cruce = 0.6
    prob_mutacion = 0.01
         



 

def funcion1(self):
         self.adaptacion=20 + np.exp(1.0) - 20 * (np.exp(-0.2 * abs(self.fenotipo))) - np.exp(
        np.cos(2 * np.pi * self.fenotipo))
 
def funcion2(self):
    self.adaptacion=np.sin(np.exp(6))(5*np.prod(self.fenotipo))*np.exp(-2*math.log(2)(self.fen-0.1/0.8)*np.exp(2))

def funcion3(self):
    self.adaptacion=self.fenotipo+abs(np.sin(32*np.prod(self.fen)))

def funcion4(self):
    self.adaptacion= -np.abs(self.fenotipo*np.sin(math.sqrt(abs(self.fen))))

def funcion5(self):
    self.adaptacion= 1+(np.cos(self.fenotipo)/(1+0.01*(self.fen**2)))

def funcion6(self):
    self.adaptacion= ((np.sin(self.fenotipo))/
               (1+np.sqrt(self.fen)+(np.cos(self.fen)/(1+self.fen))))

def funcion7(self):
    self.adaptacion= (-self.fen*np.sin(np.sqrt(abs(self.fen))))

#def funcion8(self):
   # self.adaptacion=-np.sin(self.fen)np.sin(np.exp(20)) (((self.fen+1)*(self.fen*np.exp(2)))/3.1416)




def Graficar():
    import matplotlib as plt
    t1 = np.arange(0.0, 32.0, 0.001)
    t2 = [np.float(funcion1(fenotipo)) for x in t1]
    t3 = np.asarray(t2)

    plt.plot(t1,t3, 'k')
    plt.show()



pobla = []
pobla = poblacion_inicial(t_poblacion,largoCrom)
F=fenotipo(pobla)
adaptacion(F)

# print(pobla)

#MetodoSeleccionElite(t_poblacion,poblacion_inicial) 
#Ruleta(poblacion_inicial)
# Graficar()